# google_ai_client.py
import requests
import configparser
import logging
import os

# --- 설정 로드 ---
config = configparser.ConfigParser()
config_path = os.path.join(os.path.dirname(__file__), 'config.ini')
config.read(config_path)

GOOGLE_AI_API_KEY = config.get('GOOGLE_AI', 'API_KEY', fallback=None)
if not GOOGLE_AI_API_KEY:
    logging.error("Google AI API key is not set in the config.ini file.")
    # raise ValueError("Google AI Studio API 키가 필요합니다.") # 또는 프로그램 종료

# Gemma 3 27B 모델의 API 엔드포인트 URL
API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemma-3-27b-it:generateContent"

def generate_text(prompt: str, temperature: float = 0.6, top_p: float = 0.9, max_tokens: int = 2048) -> str:
    """
    Use the Gemma 3 model of Google AI Studio to generate text.

    Args:
        prompt (str): The prompt to pass to the model.
        temperature (float): The sampling temperature, the higher the more creative the answer.
        top_p (float): The Nucleus sampling value.
        max_tokens (int): The maximum number of tokens to generate.

    Returns:
        str: The text generated by the model. Return an empty string if an error occurs.
    """
    if not GOOGLE_AI_API_KEY:
        error_msg = "Google AI API key is not set, so LLM cannot be called."
        logging.error(error_msg)
        return error_msg

    headers = {
        'Content-Type': 'application/json',
    }
    params = {
        'key': GOOGLE_AI_API_KEY,
    }
    json_data = {
        'contents': [
            {
                'parts': [
                    {
                        'text': prompt,
                    },
                ],
            },
        ],
        'generationConfig': {
            'temperature': temperature,
            'topP': top_p,
            'maxOutputTokens': max_tokens,
        },
    }

    try:
        logging.info(f"Google AI Studio API call... prompt (partial): {prompt[:150]}...")
        response = requests.post(API_URL, params=params, headers=headers, json=json_data, timeout=120)
        response.raise_for_status()

        result = response.json()
        # API 응답 구조에 따라 생성된 텍스트 추출
        generated_text = result['candidates'][0]['content']['parts'][0]['text']
        logging.info("Google AI Studio API response received.")
        return generated_text.strip()

    except requests.exceptions.RequestException as e:
        logging.error(f"Google AI API call failed: {e}")
        # API 응답 본문 로깅 (에러 디버깅에 유용)
        if e.response is not None:
            logging.error(f"API response content: {e.response.text}")
        return f"An error occurred while calling the API: {e}"
    except (KeyError, IndexError) as e:
        logging.error(f"API response parsing failed: {e}. Response content: {result}")
        return f"An error occurred while processing the API response: {e}"