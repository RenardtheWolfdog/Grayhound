// src/components/SystemScanner.tsx
import { useState, useEffect, useRef } from 'react';
import './SystemScanner.scss';

interface ScanResult {
  id: string;
  name: string;
  masked_name: string;
  reason: string;
  risk_score: number;
  path: string;
  pid: number | null;
  type: 'program' | 'process';
  clean: boolean; // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Ï†ïÎ¶¨ Ïó¨Î∂ÄÎ•º Í¥ÄÎ¶¨ÌïòÍ∏∞ ÏúÑÌïú ÏÉÅÌÉú
}

interface BackendMessage {
  type: 'scan_result' | 'progress' | 'report' | 'error';
  data: any;
}

interface SystemScannerProps {
  setCurrentView: (view: string) => void;
  language: string;
}

// Í≤ΩÍ≥† Î©îÏãúÏßÄ Îã§Íµ≠Ïñ¥ ÏßÄÏõê
const warnings = {
  en: "‚ö†Ô∏è IMPORTANT: This can delete important files! If you remove the wrong program, your system or other programs may not work properly. The creators are not responsible for any problems that may occur. Do you really want to proceed?",
  ko: "‚ö†Ô∏è Ï§ëÏöî: Ï§ëÏöîÌïú ÌååÏùºÏùÑ ÏÇ≠Ï†úÌï† Ïàò ÏûàÏäµÎãàÎã§! ÏûòÎ™ªÎêú ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ï†úÍ±∞ÌïòÎ©¥ ÏãúÏä§ÌÖúÏù¥ÎÇò Îã§Î•∏ ÌîÑÎ°úÍ∑∏Îû®Ïù¥ Ï†úÎåÄÎ°ú ÏûëÎèôÌïòÏßÄ ÏïäÏùÑ Ïàò ÏûàÏäµÎãàÎã§. Î∞úÏÉùÌï† Ïàò ÏûàÎäî Î™®Îì† Î¨∏Ï†úÏóê ÎåÄÌï¥ Ï†úÏûëÏûêÎäî Ï±ÖÏûÑÏßÄÏßÄ ÏïäÏäµÎãàÎã§. Ï†ïÎßêÎ°ú ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
  ja: "‚ö†Ô∏è ÈáçË¶ÅÔºö„Åì„Çå„Å´„Çà„ÇäÈáçË¶Å„Å™„Éï„Ç°„Ç§„É´„ÅåÂâäÈô§„Åï„Çå„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„ÅôÔºÅÈñìÈÅï„Å£„Åü„Éó„É≠„Ç∞„É©„É†„ÇíÂâäÈô§„Åô„Çã„Å®„ÄÅ„Ç∑„Çπ„ÉÜ„É†„ÇÑ‰ªñ„ÅÆ„Éó„É≠„Ç∞„É©„É†„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å™„Åè„Å™„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÁô∫Áîü„Åô„ÇãÂèØËÉΩÊÄß„ÅÆ„ÅÇ„ÇãÂïèÈ°å„Å´„Å§„ÅÑ„Å¶„ÄÅ‰ΩúÊàêËÄÖ„ÅØË≤¨‰ªª„ÇíË≤†„ÅÑ„Åæ„Åõ„Çì„ÄÇÊú¨ÂΩì„Å´Á∂öË°å„Åó„Åæ„Åô„ÅãÔºü",
  zh: "‚ö†Ô∏è ÈáçË¶ÅÔºöËøôÂèØËÉΩ‰ºöÂà†Èô§ÈáçË¶ÅÊñá‰ª∂ÔºÅÂ¶ÇÊûúÂà†Èô§ÈîôËØØÁöÑÁ®ãÂ∫èÔºåÊÇ®ÁöÑÁ≥ªÁªüÊàñÂÖ∂‰ªñÁ®ãÂ∫èÂèØËÉΩÊó†Ê≥ïÊ≠£Â∏∏Â∑•‰Ωú„ÄÇÂØπ‰∫éÂèØËÉΩÂá∫Áé∞ÁöÑ‰ªª‰ΩïÈóÆÈ¢òÔºåÂàõ‰ΩúËÄÖÊ¶Ç‰∏çË¥üË¥£„ÄÇÊÇ®ÁúüÁöÑË¶ÅÁªßÁª≠ÂêóÔºü",
};

export const SystemScanner = ({ setCurrentView, language }: SystemScannerProps) => {
  const [step, setStep] = useState('idle'); // 'idle', 'scanning', 'results', 'cleaning', 'report', 'error'
  const [scanResults, setScanResults] = useState<ScanResult[]>([]);
  const [progressLog, setProgressLog] = useState<string[]>([]);
  const [finalReport, setFinalReport] = useState("");
  const [error, setError] = useState("");
  const [riskThreshold, setRiskThreshold] = useState(6); // ÏúÑÌóòÎèÑ ÏûÑÍ≥ÑÍ∞í ÏÉÅÌÉú
  const logContainerRef = useRef<HTMLDivElement>(null);

  const ws = useRef<WebSocket | null>(null);

  // ‚úÖ Î∞±ÏóîÎìú Î©îÏãúÏßÄ Ï≤òÎ¶¨ Î°úÏßÅ ÌÜµÌï© Ìï∏Îì§Îü¨
  const handleBackendMessage = (payload: string) => {
    try {
        const { type, data } = JSON.parse(payload) as BackendMessage;

        switch (type) {
        case 'scan_result':
            if (data && data.length > 0) {
                const initialResults = data.map((item: Omit<ScanResult, 'clean'>) => ({ 
                  ...item, 
                  id: item.name, 
                  masked_name: item.masked_name || item.name,
                  clean: true 
                }));
                setScanResults(initialResults);
                setProgressLog(prev => [...prev, 'üìä Scan complete. Review the results below.']);
                setStep('results');
            } else {
                // ÏúÑÌòëÏù¥ Î∞úÍ≤¨ÎêòÏßÄ ÏïäÏïòÏùÑ Í≤ΩÏö∞
                setFinalReport("üéâ Congratulations! No bloatware found in the system.");
                setStep('report');
            }
            break;
        case 'progress':
            // dataÍ∞Ä Í∞ùÏ≤¥Ïùº Í≤ΩÏö∞ status ÌïÑÎìúÎ•º ÏÇ¨Ïö©ÌïòÍ≥†, ÏïÑÎãê Í≤ΩÏö∞ data ÏûêÏ≤¥Î•º ÏÇ¨Ïö©
            const status = typeof data === 'object' && data !== null && data.status ? data.status : data;
            setProgressLog(prev => [...prev, `[INFO] ${status}`]);
            break;
        case 'report':
            setFinalReport(data);
            setProgressLog(prev => [...prev, 'üìã Cleaning complete. See the final report.']);
            setStep('report');
            break;
        case 'error':
            setError(data);
            setStep('error');
            break;
        }
    } catch (e) {
        // JSON ÌååÏã± Ïã§Ìå® Ïãú ÏùºÎ∞ò Î°úÍ∑∏Î°ú Ï≤òÎ¶¨
        setProgressLog(prev => [...prev, `[LOG] ${payload}`]);
    }
  };

  // ‚úÖ WebSocket Ïó∞Í≤∞ ÏÑ§Ï†ï
  useEffect(() => {
    ws.current = new WebSocket('ws://localhost:8765');
    ws.current.onopen = () => {
      setProgressLog(["[INFO] Ready to scan."]);
    };
    ws.current.onmessage = (event) => {
      handleBackendMessage(event.data);
    };
    ws.current.onerror = () => {
      setError("Connection to server failed. Please ensure the server is running.");
      setStep('error');
    };
    return () => {
      ws.current?.close();
    };
  }, []);

  useEffect(() => {
    // Î°úÍ∑∏Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏Îê† ÎïåÎßàÎã§ Îß® ÏïÑÎûòÎ°ú Ïä§ÌÅ¨Î°§
    if (logContainerRef.current) {
      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;
    }
  }, [progressLog]);

  const handleScan = () => {
    if (ws.current?.readyState !== WebSocket.OPEN) {
      setError("Server is not connected.");
      setStep('error');
      return;
    }
    setStep('scanning');
    setScanResults([]);
    setProgressLog(['üîç Starting system scan...']);
    setError("");
    setFinalReport("");
    // scan ÏöîÏ≤≠ Ïãú riskThresholdÎèÑ Ìï®Íªò Ï†ÑÎã¨
    ws.current.send(JSON.stringify({ command: "scan", args: ["[]", riskThreshold.toString()] }));
  };
  
  const handleClean = () => {
    // Îã§Íµ≠Ïñ¥ Í≤ΩÍ≥† Î©îÏãúÏßÄ ÌëúÏãú
    const userConfirmed = window.confirm(warnings[language as keyof typeof warnings] || warnings['en']);
    if (!userConfirmed) {
      return;
    }

    if (ws.current?.readyState !== WebSocket.OPEN) {
      setError("Server is not connected.");
      setStep('error');
      return;
    }
    const itemsToClean = scanResults.filter(item => item.clean);
    if (itemsToClean.length === 0) {
      alert("Please select at least one item to clean.");
      return;
    }
    setStep('cleaning');
    setProgressLog(prev => [...prev, `üßπ Starting to clean ${itemsToClean.length} items...`]);
    // clean ÏöîÏ≤≠ Ïãú languageÎèÑ Ìï®Íªò Ï†ÑÎã¨
    ws.current.send(JSON.stringify({ 
      command: "clean", 
      args: [JSON.stringify(itemsToClean), language] 
    }));
  };

  const handleBackToDashboard = () => {
    // Ïä§Ï∫î Í≤∞Í≥ºÍ∞Ä ÏûàÍ≥†, ÏïÑÏßÅ Ï†ïÎ¶¨(cleaning)ÎÇò Î¶¨Ìè¨Ìä∏ Îã®Í≥ÑÍ∞Ä ÏïÑÎãê Îïå Í≤ΩÍ≥†
    if (scanResults.length > 0 && (step === 'results' || step === 'cleaning')) {
       if (window.confirm("Warning: If you go back, the current scan results will be discarded. Are you sure?")) {
        setCurrentView('dashboard');
      }
    } else {
      setCurrentView('dashboard');
    }
  };

  const toggleClean = (id: string) => {
    setScanResults(scanResults.map(item => 
      item.id === id ? { ...item, clean: !item.clean } : item
    ));
  };

  const renderProgress = () => (
    <div className="report-box progress-log" ref={logContainerRef}>
        <h4>Scan Progress</h4>
        {progressLog.map((log, i) => <p key={i}>{log}</p>)}
    </div>
  );

  const renderResults = () => (
    <div className="results-container">
        <h4>Scan Results</h4>
        <div className="results-list">
            {scanResults.map(item => (
                <div key={item.id} className="result-item">
                    <input type="checkbox" id={`clean-${item.id}`} checked={!!item.clean} onChange={() => toggleClean(item.id)} />
                    <label htmlFor={`clean-${item.id}`}>
                        <strong>{item.masked_name}</strong> (Risk: {item.risk_score})
                        <span className="reason">{item.reason}</span>
                        <code className="path">{item.path}</code>
                    </label>
                </div>
            ))}
        </div>
        <div className="row">
            <button onClick={handleClean} disabled={scanResults.filter(i => i.clean).length === 0}>Clean Selected Items</button>
            <button type="button" onClick={handleScan}>Scan Again</button>
            <button type="button" onClick={() => handleBackToDashboard()}>Back to Dashboard</button>
        </div>
    </div>
  );

  const renderReport = () => (
      <div className="report-box">
          <h3>Final Report</h3>
          <pre>{finalReport}</pre>
          <button type="button" onClick={handleScan}>Scan Again</button>
          <button type="button" onClick={() => handleBackToDashboard()}>Back to Dashboard</button>
      </div>
  );

  const renderError = () => (
      <div className="error-container">
          <h3>Error</h3>
          <pre className="error-log">{error}</pre>
          <button type="button" onClick={handleScan}>Try Scan Again</button>
          <button type="button" onClick={() => handleBackToDashboard()}>Back to Dashboard</button>
      </div>
  );

  const renderIdle = () => (
    <>
      <div className="risk-info">
        <h4>Risk Score Guide</h4>
        <p><span className="risk-high">7-10:</span> Harmful, recommend immediate deletion.</p>
        <p><span className="risk-medium">4-6:</span> Bloatware, consumes resources.</p>
        <p><span className="risk-low">1-3:</span> Normal program. (Not typically shown)</p>
        <p><span className="risk-safe">0:</span> Essential system component.</p>
      </div>
      <div className="risk-slider-container">
        <label htmlFor="risk-slider">Minimum Risk Score to Scan: {riskThreshold}</label>
        <input 
          type="range"
          id="risk-slider"
          min="0"
          max="10"
          value={riskThreshold}
          onChange={(e) => setRiskThreshold(Number(e.target.value))}
          className="risk-slider"
        />
      </div>
      <button onClick={handleScan} className="start-button">Start PC Scan</button>
      <button type="button" onClick={() => handleBackToDashboard()}>Back to Dashboard</button>
    </>
  );

  return (
    <div className="container system-scanner">
      <h2>üíª Scan & Clean PC</h2>
      {step === 'idle' && renderIdle()}
      {(step === 'scanning' || step === 'cleaning') && renderProgress()}
      {step === 'results' && renderResults()}
      {step === 'report' && renderReport()}
      {step === 'error' && renderError()}
    </div>
  );
};