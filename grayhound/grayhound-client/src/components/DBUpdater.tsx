// src/components/DBUpdater.tsx
import React, { useState, useEffect, useRef } from 'react';
import './DBUpdater.scss';

// --- Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ï†ïÏùò ---
interface Queries {
  known_bloatware_queries: string[];
  general_search_queries: string[];
}

interface GeneratedQueriesState  {
  original_queries: Queries;
  masked_queries: Queries;
}

interface BackendMessage {
  type: 'progress' | 'error' | 'db_queries_generated' | 'db_list';
  data: any;
}

// Í≤ΩÍ≥† Î©îÏãúÏßÄ Îã§Íµ≠Ïñ¥ ÏßÄÏõê
const warnings = {
  en: "‚ö†Ô∏è Review the queries. Proceeding will start web crawling and DB updates. This may take several minutes. The creators are not responsible for any problems that may occur.",
  ko: "‚ö†Ô∏è ÏøºÎ¶¨Î•º Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî. Í≥ÑÏÜç ÏßÑÌñâÌïòÎ©¥ Ïõπ ÌÅ¨Î°§ÎßÅ Î∞è DB ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÏãúÏûëÎê©ÎãàÎã§. Ïù¥ ÏûëÏóÖÏùÄ Î™á Î∂Ñ Ï†ïÎèÑ ÏÜåÏöîÎê† Ïàò ÏûàÏäµÎãàÎã§. Î∞úÏÉùÌï† Ïàò ÏûàÎäî Î™®Îì† Î¨∏Ï†úÏóê ÎåÄÌï¥ Ï†úÏûëÏûêÎäî Ï±ÖÏûÑÏßÄÏßÄ ÏïäÏäµÎãàÎã§.",
  ja: "‚ö†Ô∏è „ÇØ„Ç®„É™„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÁ∂öË°å„Åô„Çã„Å®„ÄÅWeb„ÇØ„É≠„Éº„É´„Å®DB„ÅÆÊõ¥Êñ∞„ÅåÈñãÂßã„Åï„Çå„Åæ„Åô„ÄÇ„Åì„Çå„Å´„ÅØÊï∞ÂàÜ„Åã„Åã„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÁô∫Áîü„Åô„ÇãÂèØËÉΩÊÄß„ÅÆ„ÅÇ„ÇãÂïèÈ°å„Å´„Å§„ÅÑ„Å¶„ÄÅ‰ΩúÊàêËÄÖ„ÅØË≤¨‰ªª„ÇíË≤†„ÅÑ„Åæ„Åõ„Çì„ÄÇ",
  zh: "‚ö†Ô∏è ËØ∑Ê£ÄÊü•Êü•ËØ¢„ÄÇÁªßÁª≠Êìç‰ΩúÂ∞ÜÂºÄÂßãÁΩëÁªúÁà¨ÂèñÂíåÊï∞ÊçÆÂ∫ìÊõ¥Êñ∞„ÄÇËøôÂèØËÉΩÈúÄË¶ÅÂá†ÂàÜÈíüÊó∂Èó¥„ÄÇÂØπ‰∫éÂèØËÉΩÂá∫Áé∞ÁöÑ‰ªª‰ΩïÈóÆÈ¢òÔºåÂàõ‰ΩúËÄÖ‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªª„ÄÇ",
};

export const DBUpdater = ({ setCurrentView, setLanguage }: { setCurrentView: (view: string) => void, setLanguage: (lang: string) => void }) => {
  const [updateStep, setUpdateStep] = useState('form');
  const [generatedQueries, setGeneratedQueries] = useState<GeneratedQueriesState | null>(null);
  const [progressLog, setProgressLog] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isProcessFinished, setIsProcessFinished] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const logContainerRef = useRef<HTMLDivElement>(null);

  const ws = useRef<WebSocket | null>(null);

  // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ï≤òÏùå ÎßàÏö¥Ìä∏Îê† Îïå Í∏∞Î≥∏ Ïñ∏Ïñ¥Î•º ÏÑ§Ï†ï
  useEffect(() => {
    handleCountryChange({ target: { value: 'South Korea' } } as React.ChangeEvent<HTMLSelectElement>);
  }, []);

  // ‚úÖ WebSocket Ïó∞Í≤∞ Î∞è Î©îÏãúÏßÄ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
  useEffect(() => {
    // WebSocket ÏÑúÎ≤Ñ Ï£ºÏÜå (Grayhound_Tauri.pyÍ∞Ä Ïã§ÌñâÎêòÎäî Ï£ºÏÜå)
    ws.current = new WebSocket('ws://localhost:8765');

    ws.current.onopen = () => {
      setProgressLog(prev => [...prev, '[INFO] üõ°Ô∏è Grayhound Server Connected.']);
    };

    ws.current.onmessage = (event) => {
      handleBackendMessage(event.data);
    };

    ws.current.onerror = (error) => {
      setProgressLog(prev => [...prev, `[ERROR] ‚ùå WebSocket Error: ${JSON.stringify(error)}`]);
      setIsLoading(false);
    };

    ws.current.onclose = () => {
      setProgressLog(prev => [...prev, '[INFO] üõ°Ô∏è Server Connection Closed.']);
    };

    // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ïñ∏ÎßàÏö¥Ìä∏Îê† Îïå WebSocket Ïó∞Í≤∞ÏùÑ Ï†ïÎ¶¨
    return () => {
      ws.current?.close();
    };
  }, []); // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ìïú Î≤àÎßå Ïã§Ìñâ

  useEffect(() => {
    // Î°úÍ∑∏Í∞Ä Ï∂îÍ∞ÄÎê† ÎïåÎßàÎã§ ÏûêÎèôÏúºÎ°ú Îß® ÏïÑÎûòÎ°ú Ïä§ÌÅ¨Î°§
    if (logContainerRef.current) {
        logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;
    }
  }, [progressLog]);

  // ‚úÖ Î∞±ÏóîÎìú Î©îÏãúÏßÄ Ï≤òÎ¶¨ Î°úÏßÅ
  const handleBackendMessage = (payload: string) => {
    try {
      const output: BackendMessage = JSON.parse(payload);

      switch (output.type) {
        case 'progress':
          // progress Î©îÏãúÏßÄ Ï≤òÎ¶¨ - dataÍ∞Ä Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ÏôÄ Î¨∏ÏûêÏó¥Ïù∏ Í≤ΩÏö∞ Î™®Îëê Ï≤òÎ¶¨
          let statusMessage = '';
          if (typeof output.data === 'string') {
            statusMessage = output.data;
          } else if (output.data?.status) {
            statusMessage = output.data.status;
          } else if (output.data) {
            statusMessage = JSON.stringify(output.data);
          }
          
          if (statusMessage) {
            setProgressLog(prev => [...prev, `[INFO] ${statusMessage}`]);
          }
          break;
        case 'error':
          // error Î©îÏãúÏßÄ Ï≤òÎ¶¨
          const errorMessage = typeof output.data === 'string' ? output.data : JSON.stringify(output.data);
          setProgressLog(prev => [...prev, `[ERROR] ‚ùå ${errorMessage}`]);
          setIsLoading(false);
          setIsProcessFinished(true);
          break;
        case 'db_queries_generated':
          setGeneratedQueries(output.data);
          setUpdateStep('confirm');
          setIsLoading(false);
          setProgressLog(prev => [...prev, '[SUCCESS] ‚úÖ AI-generated queries are ready for review.']);
          break;
        case 'db_list':
          setIsLoading(false);
          setIsProcessFinished(true);
          setProgressLog(prev => [...prev, '[SUCCESS] üéâ Database update complete!']);
          break;
        default:
            // JSON ÌòïÏãùÏù¥ÏßÄÎßå typeÏù¥ Ï†ïÏùòÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞, ÏùºÎ∞ò Î°úÍ∑∏Î°ú Ï≤òÎ¶¨
          setProgressLog(prev => [...prev, `[LOG] ${payload}`]);
          break;
      }
    } catch (e) {
      // JSON ÌååÏã±Ïóê Ïã§Ìå®ÌïòÎ©¥ ÏùºÎ∞ò ÌÖçÏä§Ìä∏ Î°úÍ∑∏Î°ú Í∞ÑÏ£ºÌïòÍ≥† Ï∂úÎ†•
      setProgressLog(prev => [...prev, `[LOG] ${payload}`]);
    }
  };

  const handleGenerateQueries = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (ws.current?.readyState !== WebSocket.OPEN) {
      setProgressLog(prev => [...prev, '[ERROR] ‚ùå WebSocket not connected.']);
      return;
    }
    setIsLoading(true);
    setUpdateStep('updating');
    setProgressLog(['[INFO] ‚è≥ Requesting AI to generate search queries...']);

    const formData = new FormData(e.currentTarget);
    const country = formData.get("country") as string;
    const os = formData.get("os") as string;

    // WebSocketÏùÑ ÌÜµÌï¥ Î™ÖÎ†π Ï†ÑÏÜ°
    ws.current?.send(JSON.stringify({
      command: 'update_db',
      args: [country, os]
    }));
  };

  const handleConfirmUpdate = async () => {
    if (!generatedQueries || ws.current?.readyState !== WebSocket.OPEN) return;
    setIsLoading(true);
    setUpdateStep('updating');
    setProgressLog(prev => [...prev, '[INFO] üëç Queries confirmed. Starting DB update process...']);
 
    // WebSocketÏùÑ ÌÜµÌï¥ Î™ÖÎ†π Ï†ÑÏÜ°
    ws.current?.send(JSON.stringify({
      command: 'confirm_db_update',
      args: [JSON.stringify(generatedQueries.original_queries)]
    }));
  };

  const handleBackToDashboard = () => {
    // ÏøºÎ¶¨Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏúºÎÇò ÏïÑÏßÅ ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÏôÑÎ£åÎêòÏßÄ ÏïäÏùÑ ÏÉÅÌÉúÏùº Ïãú Í≤ΩÍ≥†Ï∞ΩÏùÑ ÎùÑÏõÄ.
    if (generatedQueries && !isProcessFinished) {
      if (window.confirm("Warning: If you go back now, the generated query results will be lost. Are you sure you want to proceed?")) {
        setCurrentView('dashboard');
      }
    } else {
      setCurrentView('dashboard');
    }
  };

  const handleCancelUpdate = () => {
    if (window.confirm("Warning: If you go back now, the generated query results will be lost. Are you sure you want to proceed?")) {
      setUpdateStep('form');
      setProgressLog([]);
    }
  };
  
  // Íµ≠Í∞Ä ÏÑ†ÌÉù Ïãú Ïñ∏Ïñ¥ ÏÑ†ÌÉù Î≥ÄÍ≤Ω
  const handleCountryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const country = e.target.value;
    let lang = 'en';
    switch (country) {
      case 'South Korea':
        lang = 'ko';
        break;
      case 'USA':
        lang = 'en';
        break;
      case 'China':
        lang = 'zh';
        break;
      case 'India':
        lang = 'en';
        break;
      case 'Japan':
        lang = 'ja';
        break;
    }
    setLanguage(lang);
    setCurrentLanguage(lang);
  };
  
  const renderForm = () => (
    <form onSubmit={handleGenerateQueries}>
      <div className="form-group">
        <label htmlFor="country">Country:</label>
        <select name="country" id="country" defaultValue="South Korea" onChange={handleCountryChange}>
            <option value="South Korea">South Korea</option>
            <option value="USA">United States</option>
            <option value="China">China</option>
            <option value="India">India</option>
            <option value="Japan">Japan</option>
        </select>
      </div>
      <div className="form-group">
        <label htmlFor="os">OS:</label>
        <select name="os" id="os" defaultValue="Windows 11">
            <option value="Windows 11">Windows 11</option>
            <option value="Windows 10">Windows 10</option>
            <option value="macOS Sonoma" disabled>macOS Sonoma (Coming soon)</option>
            <option value="Android" disabled>Android (Coming soon)</option>
        </select>
      </div>
      <div className="row">
        <button type="submit" disabled={isLoading}>Generate Queries</button>
        <button type="button" onClick={() => handleBackToDashboard()}>Back to Dashboard</button>
      </div>
    </form>
  );

  const renderConfirm = () => (
    <div className="confirm-container">
      <h4>AI-Generated Queries</h4>
      <div className="report-box query-box">
        <strong>Known Bloatware (Grayware) Targets:</strong>
        <ul>{generatedQueries?.masked_queries.known_bloatware_queries.map((q, i) => <li key={`k-${i}`}>{q}</li>)}</ul>
        <strong>General Search Queries:</strong>
        <ul>{generatedQueries?.masked_queries.general_search_queries.map((q, i) => <li key={`g-${i}`}>{q}</li>)}</ul>
      </div>
      <p className="warning">{warnings[currentLanguage as keyof typeof warnings] || warnings['en']}</p>
      <div className="row">
        <button onClick={() => handleConfirmUpdate()} disabled={isLoading}>Confirm & Start Update</button>
        <button type="button" onClick={() => handleCancelUpdate()} disabled={isLoading}>Cancel</button>
        <button type="button" onClick={() => handleBackToDashboard()} disabled={isLoading}>Back to Dashboard</button>
      </div>
    </div>
  );
  
  const renderProgress = () => (
    <div className="report-box progress-log" ref={logContainerRef}>
      {progressLog.map((log, i) => <p key={i}>{log}</p>)}
    </div>
  );

  return (
    <div className="container">
      <h2>üïµÔ∏è Update Bloatware DB</h2>
      {updateStep === 'form' && !isLoading && renderForm()}
      {updateStep === 'confirm' && !isLoading && renderConfirm()}
      
      {progressLog.length > 0 && 
        <div className="progress-container">
            <h4>Update Progress</h4>
            {renderProgress()}
        </div>
      }
      
      {isLoading && <p className="loading-text">Working... please wait.</p>}
      {isProcessFinished && 
          <div className="row">
              <button type="button" onClick={() => handleBackToDashboard()}>Back to Dashboard</button>
          </div>
      }
    </div>
  );
};